// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dalc/dalc.proto

/*
	Package dalc is a generated protocol buffer package.

	It is generated from these files:
		dalc/dalc.proto

	It has these top-level messages:
		DAResponse
		SubmitBlockRequest
		SubmitBlockResponse
		CheckBlockAvailabilityRequest
		CheckBlockAvailabilityResponse
		RetrieveBlocksRequest
		RetrieveBlocksResponse
*/
package dalc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import optimint "github.com/celestiaorg/optimint/types/pb/optimint"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_STATUS_CODE_UNSPECIFIED StatusCode = 0
	StatusCode_STATUS_CODE_SUCCESS     StatusCode = 1
	StatusCode_STATUS_CODE_TIMEOUT     StatusCode = 2
	StatusCode_STATUS_CODE_ERROR       StatusCode = 3
)

var StatusCode_name = map[int32]string{
	0: "STATUS_CODE_UNSPECIFIED",
	1: "STATUS_CODE_SUCCESS",
	2: "STATUS_CODE_TIMEOUT",
	3: "STATUS_CODE_ERROR",
}
var StatusCode_value = map[string]int32{
	"STATUS_CODE_UNSPECIFIED": 0,
	"STATUS_CODE_SUCCESS":     1,
	"STATUS_CODE_TIMEOUT":     2,
	"STATUS_CODE_ERROR":       3,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorDalc, []int{0} }

type DAResponse struct {
	Code            StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=dalc.StatusCode" json:"code,omitempty"`
	Message         string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	DataLayerHeight uint64     `protobuf:"varint,3,opt,name=data_layer_height,json=dataLayerHeight,proto3" json:"data_layer_height,omitempty"`
}

func (m *DAResponse) Reset()                    { *m = DAResponse{} }
func (m *DAResponse) String() string            { return proto.CompactTextString(m) }
func (*DAResponse) ProtoMessage()               {}
func (*DAResponse) Descriptor() ([]byte, []int) { return fileDescriptorDalc, []int{0} }

func (m *DAResponse) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_STATUS_CODE_UNSPECIFIED
}

func (m *DAResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DAResponse) GetDataLayerHeight() uint64 {
	if m != nil {
		return m.DataLayerHeight
	}
	return 0
}

type SubmitBlockRequest struct {
	Block *optimint.Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *SubmitBlockRequest) Reset()                    { *m = SubmitBlockRequest{} }
func (m *SubmitBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitBlockRequest) ProtoMessage()               {}
func (*SubmitBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptorDalc, []int{1} }

func (m *SubmitBlockRequest) GetBlock() *optimint.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type SubmitBlockResponse struct {
	Result *DAResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *SubmitBlockResponse) Reset()                    { *m = SubmitBlockResponse{} }
func (m *SubmitBlockResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitBlockResponse) ProtoMessage()               {}
func (*SubmitBlockResponse) Descriptor() ([]byte, []int) { return fileDescriptorDalc, []int{2} }

func (m *SubmitBlockResponse) GetResult() *DAResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type CheckBlockAvailabilityRequest struct {
	DataLayerHeight uint64 `protobuf:"varint,1,opt,name=data_layer_height,json=dataLayerHeight,proto3" json:"data_layer_height,omitempty"`
}

func (m *CheckBlockAvailabilityRequest) Reset()         { *m = CheckBlockAvailabilityRequest{} }
func (m *CheckBlockAvailabilityRequest) String() string { return proto.CompactTextString(m) }
func (*CheckBlockAvailabilityRequest) ProtoMessage()    {}
func (*CheckBlockAvailabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDalc, []int{3}
}

func (m *CheckBlockAvailabilityRequest) GetDataLayerHeight() uint64 {
	if m != nil {
		return m.DataLayerHeight
	}
	return 0
}

type CheckBlockAvailabilityResponse struct {
	Result        *DAResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	DataAvailable bool        `protobuf:"varint,2,opt,name=data_available,json=dataAvailable,proto3" json:"data_available,omitempty"`
}

func (m *CheckBlockAvailabilityResponse) Reset()         { *m = CheckBlockAvailabilityResponse{} }
func (m *CheckBlockAvailabilityResponse) String() string { return proto.CompactTextString(m) }
func (*CheckBlockAvailabilityResponse) ProtoMessage()    {}
func (*CheckBlockAvailabilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDalc, []int{4}
}

func (m *CheckBlockAvailabilityResponse) GetResult() *DAResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CheckBlockAvailabilityResponse) GetDataAvailable() bool {
	if m != nil {
		return m.DataAvailable
	}
	return false
}

type RetrieveBlocksRequest struct {
	DataLayerHeight uint64 `protobuf:"varint,1,opt,name=data_layer_height,json=dataLayerHeight,proto3" json:"data_layer_height,omitempty"`
}

func (m *RetrieveBlocksRequest) Reset()                    { *m = RetrieveBlocksRequest{} }
func (m *RetrieveBlocksRequest) String() string            { return proto.CompactTextString(m) }
func (*RetrieveBlocksRequest) ProtoMessage()               {}
func (*RetrieveBlocksRequest) Descriptor() ([]byte, []int) { return fileDescriptorDalc, []int{5} }

func (m *RetrieveBlocksRequest) GetDataLayerHeight() uint64 {
	if m != nil {
		return m.DataLayerHeight
	}
	return 0
}

type RetrieveBlocksResponse struct {
	Result *DAResponse       `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Blocks []*optimint.Block `protobuf:"bytes,2,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *RetrieveBlocksResponse) Reset()                    { *m = RetrieveBlocksResponse{} }
func (m *RetrieveBlocksResponse) String() string            { return proto.CompactTextString(m) }
func (*RetrieveBlocksResponse) ProtoMessage()               {}
func (*RetrieveBlocksResponse) Descriptor() ([]byte, []int) { return fileDescriptorDalc, []int{6} }

func (m *RetrieveBlocksResponse) GetResult() *DAResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RetrieveBlocksResponse) GetBlocks() []*optimint.Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*DAResponse)(nil), "dalc.DAResponse")
	proto.RegisterType((*SubmitBlockRequest)(nil), "dalc.SubmitBlockRequest")
	proto.RegisterType((*SubmitBlockResponse)(nil), "dalc.SubmitBlockResponse")
	proto.RegisterType((*CheckBlockAvailabilityRequest)(nil), "dalc.CheckBlockAvailabilityRequest")
	proto.RegisterType((*CheckBlockAvailabilityResponse)(nil), "dalc.CheckBlockAvailabilityResponse")
	proto.RegisterType((*RetrieveBlocksRequest)(nil), "dalc.RetrieveBlocksRequest")
	proto.RegisterType((*RetrieveBlocksResponse)(nil), "dalc.RetrieveBlocksResponse")
	proto.RegisterEnum("dalc.StatusCode", StatusCode_name, StatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DALCService service

type DALCServiceClient interface {
	SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
	CheckBlockAvailability(ctx context.Context, in *CheckBlockAvailabilityRequest, opts ...grpc.CallOption) (*CheckBlockAvailabilityResponse, error)
	RetrieveBlocks(ctx context.Context, in *RetrieveBlocksRequest, opts ...grpc.CallOption) (*RetrieveBlocksResponse, error)
}

type dALCServiceClient struct {
	cc *grpc.ClientConn
}

func NewDALCServiceClient(cc *grpc.ClientConn) DALCServiceClient {
	return &dALCServiceClient{cc}
}

func (c *dALCServiceClient) SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	out := new(SubmitBlockResponse)
	err := grpc.Invoke(ctx, "/dalc.DALCService/SubmitBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dALCServiceClient) CheckBlockAvailability(ctx context.Context, in *CheckBlockAvailabilityRequest, opts ...grpc.CallOption) (*CheckBlockAvailabilityResponse, error) {
	out := new(CheckBlockAvailabilityResponse)
	err := grpc.Invoke(ctx, "/dalc.DALCService/CheckBlockAvailability", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dALCServiceClient) RetrieveBlocks(ctx context.Context, in *RetrieveBlocksRequest, opts ...grpc.CallOption) (*RetrieveBlocksResponse, error) {
	out := new(RetrieveBlocksResponse)
	err := grpc.Invoke(ctx, "/dalc.DALCService/RetrieveBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DALCService service

type DALCServiceServer interface {
	SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error)
	CheckBlockAvailability(context.Context, *CheckBlockAvailabilityRequest) (*CheckBlockAvailabilityResponse, error)
	RetrieveBlocks(context.Context, *RetrieveBlocksRequest) (*RetrieveBlocksResponse, error)
}

func RegisterDALCServiceServer(s *grpc.Server, srv DALCServiceServer) {
	s.RegisterService(&_DALCService_serviceDesc, srv)
}

func _DALCService_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DALCServiceServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dalc.DALCService/SubmitBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DALCServiceServer).SubmitBlock(ctx, req.(*SubmitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DALCService_CheckBlockAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBlockAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DALCServiceServer).CheckBlockAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dalc.DALCService/CheckBlockAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DALCServiceServer).CheckBlockAvailability(ctx, req.(*CheckBlockAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DALCService_RetrieveBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DALCServiceServer).RetrieveBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dalc.DALCService/RetrieveBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DALCServiceServer).RetrieveBlocks(ctx, req.(*RetrieveBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DALCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dalc.DALCService",
	HandlerType: (*DALCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlock",
			Handler:    _DALCService_SubmitBlock_Handler,
		},
		{
			MethodName: "CheckBlockAvailability",
			Handler:    _DALCService_CheckBlockAvailability_Handler,
		},
		{
			MethodName: "RetrieveBlocks",
			Handler:    _DALCService_RetrieveBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dalc/dalc.proto",
}

func (m *DAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DAResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDalc(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDalc(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.DataLayerHeight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDalc(dAtA, i, uint64(m.DataLayerHeight))
	}
	return i, nil
}

func (m *SubmitBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDalc(dAtA, i, uint64(m.Block.Size()))
		n1, err := m.Block.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SubmitBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDalc(dAtA, i, uint64(m.Result.Size()))
		n2, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CheckBlockAvailabilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBlockAvailabilityRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataLayerHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDalc(dAtA, i, uint64(m.DataLayerHeight))
	}
	return i, nil
}

func (m *CheckBlockAvailabilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckBlockAvailabilityResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDalc(dAtA, i, uint64(m.Result.Size()))
		n3, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DataAvailable {
		dAtA[i] = 0x10
		i++
		if m.DataAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RetrieveBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataLayerHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDalc(dAtA, i, uint64(m.DataLayerHeight))
	}
	return i, nil
}

func (m *RetrieveBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDalc(dAtA, i, uint64(m.Result.Size()))
		n4, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDalc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Dalc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dalc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDalc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DAResponse) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDalc(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDalc(uint64(l))
	}
	if m.DataLayerHeight != 0 {
		n += 1 + sovDalc(uint64(m.DataLayerHeight))
	}
	return n
}

func (m *SubmitBlockRequest) Size() (n int) {
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	return n
}

func (m *SubmitBlockResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	return n
}

func (m *CheckBlockAvailabilityRequest) Size() (n int) {
	var l int
	_ = l
	if m.DataLayerHeight != 0 {
		n += 1 + sovDalc(uint64(m.DataLayerHeight))
	}
	return n
}

func (m *CheckBlockAvailabilityResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	if m.DataAvailable {
		n += 2
	}
	return n
}

func (m *RetrieveBlocksRequest) Size() (n int) {
	var l int
	_ = l
	if m.DataLayerHeight != 0 {
		n += 1 + sovDalc(uint64(m.DataLayerHeight))
	}
	return n
}

func (m *RetrieveBlocksResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDalc(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovDalc(uint64(l))
		}
	}
	return n
}

func sovDalc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDalc(x uint64) (n int) {
	return sovDalc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (StatusCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLayerHeight", wireType)
			}
			m.DataLayerHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLayerHeight |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &optimint.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DAResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBlockAvailabilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBlockAvailabilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBlockAvailabilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLayerHeight", wireType)
			}
			m.DataLayerHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLayerHeight |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckBlockAvailabilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckBlockAvailabilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckBlockAvailabilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DAResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataAvailable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLayerHeight", wireType)
			}
			m.DataLayerHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLayerHeight |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &DAResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDalc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &optimint.Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDalc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDalc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDalc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDalc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDalc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDalc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDalc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDalc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDalc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDalc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dalc/dalc.proto", fileDescriptorDalc) }

var fileDescriptorDalc = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x51, 0x6f, 0x12, 0x41,
	0x10, 0xc7, 0x39, 0x40, 0xd4, 0x21, 0x02, 0xdd, 0xa6, 0xe5, 0xa4, 0x4a, 0xc8, 0xd9, 0x46, 0xd2,
	0x44, 0x48, 0xf0, 0xd1, 0x87, 0x86, 0x1e, 0x67, 0x24, 0xb6, 0x62, 0xf6, 0xe0, 0xc5, 0x17, 0xb2,
	0x77, 0x4c, 0x60, 0xc3, 0xd1, 0xa3, 0xb7, 0x0b, 0x91, 0x8f, 0xe0, 0x37, 0xf0, 0x23, 0xf9, 0xe8,
	0x47, 0x30, 0xf8, 0x45, 0xcc, 0xed, 0x1d, 0x94, 0xd6, 0xb3, 0x49, 0x7d, 0xb9, 0xec, 0xce, 0x6f,
	0x67, 0xe6, 0x3f, 0x37, 0x93, 0x81, 0xe2, 0x88, 0x79, 0x6e, 0x33, 0xfc, 0x34, 0xe6, 0x81, 0x2f,
	0x7d, 0x92, 0x0d, 0xcf, 0x95, 0xb2, 0x3f, 0x97, 0x7c, 0xc6, 0xaf, 0x64, 0x73, 0x73, 0x88, 0xb0,
	0xf1, 0x15, 0xa0, 0xd3, 0xa6, 0x28, 0xe6, 0xfe, 0x95, 0x40, 0x72, 0x0c, 0x59, 0xd7, 0x1f, 0xa1,
	0xae, 0xd5, 0xb4, 0x7a, 0xa1, 0x55, 0x6a, 0xa8, 0x38, 0xb6, 0x64, 0x72, 0x21, 0x4c, 0x7f, 0x84,
	0x54, 0x51, 0xa2, 0xc3, 0xe3, 0x19, 0x0a, 0xc1, 0xc6, 0xa8, 0xa7, 0x6b, 0x5a, 0xfd, 0x29, 0xdd,
	0x5c, 0xc9, 0x29, 0xec, 0x8d, 0x98, 0x64, 0x43, 0x8f, 0xad, 0x30, 0x18, 0x4e, 0x90, 0x8f, 0x27,
	0x52, 0xcf, 0xd4, 0xb4, 0x7a, 0x96, 0x16, 0x43, 0x70, 0x11, 0xda, 0x3f, 0x28, 0xb3, 0xf1, 0x0e,
	0x88, 0xbd, 0x70, 0x66, 0x5c, 0x9e, 0x7b, 0xbe, 0x3b, 0xa5, 0x78, 0xbd, 0x40, 0x21, 0xc9, 0x09,
	0x3c, 0x72, 0xc2, 0xbb, 0x92, 0x90, 0x6f, 0x15, 0x1b, 0x5b, 0xbd, 0xd1, 0xb3, 0x88, 0x1a, 0x67,
	0xb0, 0x7f, 0xcb, 0x39, 0xd6, 0x5f, 0x87, 0x5c, 0x80, 0x62, 0xe1, 0xc9, 0xd8, 0x3d, 0xae, 0xe0,
	0xa6, 0x42, 0x1a, 0x73, 0xe3, 0x23, 0xbc, 0x34, 0x27, 0xe8, 0x4e, 0x95, 0x7f, 0x7b, 0xc9, 0xb8,
	0xc7, 0x1c, 0xee, 0x71, 0xb9, 0xda, 0x08, 0x49, 0x2c, 0x45, 0x4b, 0x2e, 0xe5, 0x1a, 0xaa, 0xff,
	0x0a, 0xf6, 0x50, 0x61, 0xe4, 0x04, 0x0a, 0x2a, 0x2f, 0x8b, 0xc2, 0x78, 0xd1, 0x3f, 0x7e, 0x42,
	0x9f, 0x85, 0xd6, 0xf6, 0xc6, 0x68, 0x98, 0x70, 0x40, 0x51, 0x06, 0x1c, 0x97, 0xa8, 0xb2, 0x8a,
	0xff, 0xd1, 0x3d, 0x85, 0xc3, 0xbb, 0x41, 0x1e, 0xac, 0xf7, 0x35, 0xe4, 0x54, 0x4b, 0x84, 0x9e,
	0xae, 0x65, 0x92, 0x3a, 0x16, 0xe3, 0xd3, 0x00, 0xe0, 0x66, 0x92, 0xc8, 0x11, 0x94, 0xed, 0x7e,
	0xbb, 0x3f, 0xb0, 0x87, 0x66, 0xaf, 0x63, 0x0d, 0x07, 0x9f, 0xec, 0xcf, 0x96, 0xd9, 0x7d, 0xdf,
	0xb5, 0x3a, 0xa5, 0x14, 0x29, 0xc3, 0xfe, 0x2e, 0xb4, 0x07, 0xa6, 0x69, 0xd9, 0x76, 0x49, 0xbb,
	0x0b, 0xfa, 0xdd, 0x4b, 0xab, 0x37, 0xe8, 0x97, 0xd2, 0xe4, 0x00, 0xf6, 0x76, 0x81, 0x45, 0x69,
	0x8f, 0x96, 0x32, 0xad, 0x6f, 0x69, 0xc8, 0x77, 0xda, 0x17, 0xa6, 0x8d, 0xc1, 0x92, 0xbb, 0x48,
	0x3a, 0x90, 0xdf, 0x19, 0x1b, 0xa2, 0xc7, 0x03, 0xfe, 0xd7, 0x18, 0x56, 0x9e, 0x27, 0x90, 0xa8,
	0x70, 0x23, 0x45, 0x10, 0x0e, 0x93, 0xdb, 0x4d, 0x5e, 0x45, 0x6e, 0xf7, 0x4e, 0x56, 0xe5, 0xf8,
	0xfe, 0x47, 0xdb, 0x34, 0x97, 0x50, 0xb8, 0xdd, 0x1d, 0x72, 0x14, 0x79, 0x26, 0x36, 0xbe, 0xf2,
	0x22, 0x19, 0x6e, 0xc2, 0x9d, 0x9f, 0xfd, 0x58, 0x57, 0xb5, 0x9f, 0xeb, 0xaa, 0xf6, 0x6b, 0x5d,
	0xd5, 0xbe, 0xff, 0xae, 0xa6, 0xbe, 0xbc, 0x19, 0x73, 0x39, 0x59, 0x38, 0x0d, 0xd7, 0x9f, 0x35,
	0x5d, 0xf4, 0x50, 0x48, 0xce, 0xfc, 0x60, 0xbc, 0x5d, 0x11, 0x4d, 0xb9, 0x9a, 0xa3, 0x68, 0xce,
	0x1d, 0xb5, 0x4f, 0x9c, 0x9c, 0xda, 0x18, 0x6f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xbe,
	0xc3, 0x8c, 0x63, 0x04, 0x00, 0x00,
}
